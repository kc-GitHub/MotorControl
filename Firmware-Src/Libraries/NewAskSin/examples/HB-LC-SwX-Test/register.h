#include <AS.h>

#ifndef _REGISTER_h
	#define _REGISTER_h

	//- ----------------------------------------------------------------------------------------------------------------------
	//- eeprom defaults table ------------------------------------------------------------------------------------------------
	uint16_t EEMEM eMagicByte;
	uint8_t  EEMEM eHMID[3]  = {0x01,0x02,0x05};
	uint8_t  EEMEM eHMSR[10] = {'t','l','u','1','0','0','1','2','3','5'};

	// if HMID and Serial are not set, then eeprom ones will be used
	uint8_t HMID[3] = {0x01,0x02,0x05};
	uint8_t HMSR[10] = {'t','l','u','1','0','0','1','2','3','5'}; // tlu1001234

	uint8_t HMKEY[16] = {
			0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,       // the HM AES Key for your system (key change not available this time)
			0x09, 0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
	};

	//- ----------------------------------------------------------------------------------------------------------------------
	//- generated by createRegisterFromFile.pl
	//- ID: 0x006c, File: rf_s_ba.xml
	//- ----------------------------------------------------------------------------------------------------------------------

	//- ----------------------------------------------------------------------------------------------------------------------
	//- ----------------------------------------------------------------------------------------------------------------------
	//                                   FW  moID   serial                         ST  devInfo
	// <- 1A 01 A4 00 01 02 05 63 19 63  15  00 6C  74 6C 75 31 30 30 31 32 33 35  10  11 01 00
	// FW   -> Firmware, sometimes given in xml files of hm config software
	// moID -> Model ID, important for identification in hm config software
	// ST   -> Subtype, identifier if device is a switch or a dimmer or a remote
	// devInfo -> Device Info -> sometimes hm config files are refering on byte 23 for the amount of channels, other bytes not known
	//                           23:0 0.4, means first four bit of byte 23 reflecting the amount of channels
	//
	//- settings of HM device for AS class -----------------------------------------------------------------------------------
	const uint8_t devIdnt[] PROGMEM = {
		/* Firmware version 1 byte */  0x10,
		/* Model ID         2 byte */  0x00, 0xAB,
		/* Sub Type ID      1 byte */  0x00,
		/* Device Info      3 byte */  0x41, 0x01, 0x00,
	};

	//- ----------------------------------------------------------------------------------------------------------------------
	//- channel slice address definition -------------------------------------------------------------------------------------
	const uint8_t cnlAddr[] PROGMEM = {
		0x02,0x0a,0x0b,0x0c,0x12,0x18,
		0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,
	}; // 28 byte

	//- channel device list table --------------------------------------------------------------------------------------------
	EE::s_cnlTbl cnlTbl[] = {
	// cnl, lst, sIdx, sLen, pAddr
		{ 0, 0, 0x00,  6, 0x000f },
		{ 1, 3, 0x06, 22, 0x0015 },
		{ 2, 3, 0x16, 22, 0x0099 },
		{ 3, 3, 0x32, 22, 0x011d },
		{ 4, 3, 0x46, 22, 0x01a1 },
	}; // 35 byte

	//- peer device list table -----------------------------------------------------------------------------------------------
	EE::s_peerTbl peerTbl[] = {
		// cnl, pMax, pAddr;
		{ 1, 6, 0x0225, },
		{ 2, 6, 0x023d, },
		{ 3, 6, 0x0255, },
		{ 4, 6, 0x026d, },
	}; // 16 byte

	//- handover to AskSin lib -----------------------------------------------------------------------------------------------
	EE::s_devDef devDef = {
		4, 5, devIdnt, cnlAddr,
	}; // 6 byte

	//- module registrar -----------------------------------------------------------------------------------------------------
	RG::s_modTable modTbl[4];

#endif
